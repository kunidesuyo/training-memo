// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workout {
  id        Int        @id @default(autoincrement())
  year      Int
  month     Int
  day       Int
  author    User       @relation(fields: [authorId], references: [id])
  authorId  Int
  exercises Exercise[]

  // TODO: 複合ユニークキーの命名を行う
  @@unique([year, month, day, authorId])
}

// ユニーク制約追加
model Exercise {
  id        Int            @id @default(autoincrement())
  name      String         @db.VarChar(255)
  workout   Workout        @relation(fields: [workoutId], references: [id])
  workoutId Int
  order     Int
  items     ExerciseItem[]
  author    User           @relation(fields: [authorId], references: [id])
  authorId  Int
}

model ExerciseItem {
  id         Int              @id @default(autoincrement())
  type       ExerciseItemType
  weight     Int?
  rep        Int?
  time       Int?
  order      Int
  exercise   Exercise         @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  author     User             @relation(fields: [authorId], references: [id])
  authorId   Int
}

enum ExerciseItemType {
  WORK
  REST
}

model User {
  id            Int            @id @default(autoincrement())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Workouts      Workout[]
  Exercises     Exercise[]
  ExerciseItems ExerciseItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
